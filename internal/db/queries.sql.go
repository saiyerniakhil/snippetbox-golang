// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addSnippet = `-- name: AddSnippet :execresult
INSERT INTO snippets (title, content, expires, created)
VALUES (?, ?, ?, UTC_TIMESTAMP())
`

type AddSnippetParams struct {
	Title   string
	Content string
	Expires time.Time
}

func (q *Queries) AddSnippet(ctx context.Context, arg AddSnippetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSnippet, arg.Title, arg.Content, arg.Expires)
}

const addUser = `-- name: AddUser :execresult
INSERT INTO users (name, email, hashed_password, created)
VALUES (?, ?, ?, UTC_TIMESTAMP())
`

type AddUserParams struct {
	Name           string
	Email          string
	HashedPassword string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser, arg.Name, arg.Email, arg.HashedPassword)
}

const authenticateUser = `-- name: AuthenticateUser :one
SELECT id, hashed_password
FROM users
WHERE email = ?
`

type AuthenticateUserRow struct {
	ID             int32
	HashedPassword string
}

func (q *Queries) AuthenticateUser(ctx context.Context, email string) (AuthenticateUserRow, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, email)
	var i AuthenticateUserRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return i, err
}

const getLatestSnippets = `-- name: GetLatestSnippets :many
SELECT id, title, content, created, expires
from snippets
WHERE expires > UTC_TIMESTAMP()
order by id DESC
LIMIT ?
`

func (q *Queries) GetLatestSnippets(ctx context.Context, limit int32) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, getLatestSnippets, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Created,
			&i.Expires,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnippetById = `-- name: GetSnippetById :one
SELECT id, title, content, created, expires
FROM snippets
WHERE expires > UTC_TIMESTAMP()
  and id = ?
`

func (q *Queries) GetSnippetById(ctx context.Context, id int32) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, getSnippetById, id)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Expires,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(SELECT true FROM users WHERE id = ?)
`

func (q *Queries) UserExists(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
